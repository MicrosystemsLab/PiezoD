# jemdoc: menu{MENU}{revision.html}
= piezoD - revision history

piezoD is under active development.

= Revisions

== Version 0.4.0

- A big release. Added piezoelectric cantilever design optimization.

- Added 1D temperature profile modeling using finite differences.

- Changed the handling of the operating fluid. The class now has a fluid variable which can be "vacuum", "air" or "water". This affects heat transfer and resonant frequency calculations.

- Speed improvements. They are negated by the need to calculate the quality factor (based upon Sader's cantilever theory) every iteration in order to accurately determine the thermomechanical noise.


== Version 0.3.1

- Moved the goals and constants (e.g. VACUUM = 1) to class variables for tidiness. See 'sample_code' for examples.

- Rearranged the cantilever print output (both normal and Excel)

- Added a 'number_of_piezoresistors' parameter to specify the number of silicon resistors in the bridge. This only affects the 1/f noise of the bridge.

- Rewrote the amplifier noise as integrated_amplifier_noise(). Includes the current noise, both Johnson and 1/f, of the amplifiern now. This change favors lower impedance piezoresistors. Assumes that the amplifier is the TI INA103, which is a BJT instrumentation amplifier so has high current noise and low voltage noise.

- Changed the default gamma value from 0.5 to 0.9. Gamma is the ratio of piezoresistor resistance to total resistance, so this change assumes that you've designed your device with low resistance interconnects.

- Added resolution_tradeoff_plot(), which shows the achievable tradeoff between force and displacement resolution given the other cantilever constraints.

- Added default constraints on the L/W and W/T ratio of the cantilever.


== Version 0.3.0

- The optimization functions now take in just three arguments: parameter constraints, nonlinear constraints, and the optimization goal. Parameter constraints already existed in previous versions. The nonlinear constraints argument is new: it holds things like power dissipation and resonant frequency. The goal argument is also new: it corresponds to either optimizing for force or displacement resolution.

- These changes make it much more convenient for the user to specify a fixed cantilever spring constant or spring constant range to optimize over. In the long term, this approach should be much more extensible than the previous implementation.

- Updated sample_code.m accordingly.

== Version 0.2.1

- Fixed several typos and bugs in the code related to constraint handling during diffusion piezoresistor optimization.


== Version 0.2.0

- Rewrote all bias voltages in terms of the Wheatstone bridge bias
(previously power and 1/f used resistor bias while sensitivity used
bridge bias)

- Rewrote the noise in terms of the Wheatstone bridge output
noise. Johnson noise was correct, 1/f noise was off by a factor of
sqrt(2).

- Rewrote the way in which constraints are handled; previously there
was a general optimization function where you could set every
constraint individually and then a large number of helper functions
callable by the user (e.g. one function to set the min thickness, and
another function for when you wanted to set the min thickness and max
voltage). Now, constrains are handled by a key/value cell array
(i.e. a dictionary) so that you can arbitrarily set constraints and
just pass them into the main optimization function as a single
argument.

- Added a script (sample_code.m) which shows how to use the code. This
needs more work and is part of a larger effort to make the code more
user friendly and reduce barriers to usage.


== Version 0.1.0

- First public release

- Handles n-type and p-type silicon piezoresistors

- Optimization for broadband force sensing

- Epitaxy and diffusion doping

- Flexible constraint and bounds
